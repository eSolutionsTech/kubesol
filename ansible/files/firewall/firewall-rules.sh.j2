#!/bin/bash
# firewall-rules.sh

# this is a simle firewall to allow all access between all nodes IP
# and external access from any IP for: ssh, http, https, 6443
# you may replace it with something more restrictive if you wish

ALLOWED_IPS_2=({% for ansible_host in groups ['all'] %} "{{hostvars[ansible_host]['ansible_all_ipv4_addresses']}}" {% endfor %} )

ALLOWED_IPS="$(echo ${ALLOWED_IPS_2[@]} | tr -d "'[]," )"  # flatten lists

ALLOWED_IPS="$ALLOWED_IPS 10.42.0.0/16"  # add some extra ranges
                                         # cluster-cidr network CIDRs to use for pod IPs
					 # metrics server pod is trying to access node external IP

function start_firewall() {
    # Flush all existing rules
    iptables -F

    # Default policy to accept all incoming and forwarded packets
    iptables -P INPUT ACCEPT
    iptables -P FORWARD ACCEPT
    iptables -P OUTPUT ACCEPT

    # Allow loopback interface
    iptables -A INPUT -i lo -j ACCEPT
    iptables -A OUTPUT -o lo -j ACCEPT
    
    # Allow ICMP
    iptables -A INPUT -p icmp -j ACCEPT

    # Allow established and related incoming connections
    iptables -A INPUT -m conntrack --ctstate ESTABLISHED,RELATED -j ACCEPT
    iptables -A OUTPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT

    # Allow from any incoming SSH, HTTP, and HTTPS 
    iptables -A INPUT -p tcp --dport 22 -j ACCEPT
    iptables -A INPUT -p tcp --dport 80 -j ACCEPT
    iptables -A INPUT -p tcp --dport 443 -j ACCEPT
    
    # Allow from any - Control Plane Node(s):
    iptables -A INPUT -p tcp --dport 6443 -j ACCEPT # Kubernetes API server

    # Allow incoming traffic from all ALLOWED_IPS
    for ip in ${ALLOWED_IPS}; do
        iptables -A INPUT -s $ip -j ACCEPT
    done

    # Reject all inputs
    iptables -A INPUT   -m state --state NEW -j LOG
    iptables -A INPUT   -p tcp -m state --state NEW -j REJECT --reject-with tcp-reset
    iptables -A INPUT   -p udp -m state --state NEW -j REJECT --reject-with icmp-port-unreachable
    iptables -A INPUT   -m state --state NEW -j DROP

}

function stop_firewall() {
    # Flush all rules, delete all chains, and accept all by default
    iptables -F
    iptables -X
    iptables -P INPUT ACCEPT
    iptables -P FORWARD ACCEPT
    iptables -P OUTPUT ACCEPT
}

function restart_firewall() {
    stop_firewall
    start_firewall
}

case "$1" in
    start)
        start_firewall
        ;;
    stop)
        stop_firewall
        ;;
    restart)
        restart_firewall
        ;;
    *)
        echo "Usage: $0 {start|stop|restart}"
        exit 1
        ;;
esac
